#!/bin/bash

# HealthFlow-MS - Script de surveillance des services
# Monitore la sant√© de tous les microservices

set -e

echo "üîç Surveillance de la sant√© des services HealthFlow-MS"
echo "=================================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour v√©rifier si un service est actif
check_service() {
    local service_name=$1
    local status=$(docker compose ps --format "table {{.Service}}\t{{.State}}" | grep "$service_name" | awk '{print $2}' || echo "not_found")
    
    if [ "$status" = "running" ]; then
        echo -e "${GREEN}‚úì${NC} $service_name : ${GREEN}Actif${NC}"
        return 0
    elif [ "$status" = "exited" ]; then
        echo -e "${RED}‚úó${NC} $service_name : ${RED}Arr√™t√©${NC}"
        return 1
    else
        echo -e "${YELLOW}?${NC} $service_name : ${YELLOW}√âtat inconnu${NC}"
        return 1
    fi
}

# Fonction pour v√©rifier la connectivit√© r√©seau
check_connectivity() {
    local service_name=$1
    local port=$2
    local host=${3:-localhost}
    
    if timeout 5 bash -c "echo >/dev/tcp/$host/$port" 2>/dev/null; then
        echo -e "${GREEN}‚úì${NC} $service_name ($host:$port) : ${GREEN}Accessible${NC}"
        return 0
    else
        echo -e "${RED}‚úó${NC} $service_name ($host:$port) : ${RED}Inaccessible${NC}"
        return 1
    fi
}

# Fonction pour v√©rifier la sant√© d'un endpoint HTTP
check_health_endpoint() {
    local service_name=$1
    local url=$2
    
    local response=$(curl -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null || echo "000")
    
    if [ "$response" -ge 200 ] && [ "$response" -lt 300 ]; then
        echo -e "${GREEN}‚úì${NC} $service_name Health Check : ${GREEN}HTTP $response${NC}"
        return 0
    else
        echo -e "${RED}‚úó${NC} $service_name Health Check : ${RED}HTTP $response${NC}"
        return 1
    fi
}

# Fonction pour afficher les logs r√©cents d'un service
show_recent_logs() {
    local service_name=$1
    echo -e "\n${BLUE}üìã Logs r√©cents pour $service_name :${NC}"
    docker compose logs --tail=5 "$service_name" 2>/dev/null || echo "Logs non disponibles"
}

# Variables de comptage
total_services=0
healthy_services=0

echo -e "\n${BLUE}üîß Infrastructure Services${NC}"
echo "========================="

# V√©rification PostgreSQL
((total_services++))
if check_service "postgres" && check_connectivity "PostgreSQL" 5432; then
    ((healthy_services++))
fi

# V√©rification Zookeeper
((total_services++))
if check_service "zookeeper" && check_connectivity "Zookeeper" 2181; then
    ((healthy_services++))
fi

# V√©rification Kafka
((total_services++))
if check_service "kafka" && check_connectivity "Kafka" 9092; then
    ((healthy_services++))
fi

echo -e "\n${BLUE}üöÄ Application Services${NC}"
echo "======================="

# V√©rification ProxyFHIR
((total_services++))
if check_service "proxyfhir"; then
    if check_connectivity "ProxyFHIR" 8081 && check_health_endpoint "ProxyFHIR" "http://localhost:8081/actuator/health"; then
        ((healthy_services++))
    fi
else
    show_recent_logs "proxyfhir"
fi

# V√©rification DeID
((total_services++))
if check_service "deid"; then
    if check_connectivity "DeID" 8001 && check_health_endpoint "DeID" "http://localhost:8001/health"; then
        ((healthy_services++))
    fi
else
    show_recent_logs "deid"
fi

# V√©rification Featurizer
((total_services++))
if check_service "featurizer"; then
    if check_connectivity "Featurizer" 8002 && check_health_endpoint "Featurizer" "http://localhost:8002/health"; then
        ((healthy_services++))
    fi
else
    show_recent_logs "featurizer"
fi

# V√©rification ModelRisque
((total_services++))
if check_service "modelrisque"; then
    if check_connectivity "ModelRisque" 8003 && check_health_endpoint "ModelRisque" "http://localhost:8003/health"; then
        ((healthy_services++))
    fi
else
    show_recent_logs "modelrisque"
fi

# V√©rification ScoreAPI
((total_services++))
if check_service "scoreapi"; then
    if check_connectivity "ScoreAPI" 8082 && check_health_endpoint "ScoreAPI" "http://localhost:8082/health"; then
        ((healthy_services++))
    fi
else
    show_recent_logs "scoreapi"
fi

# V√©rification AuditFairness
((total_services++))
if check_service "auditfairness"; then
    if check_connectivity "AuditFairness" 8083 && check_health_endpoint "AuditFairness" "http://localhost:8083/_dash-dependencies"; then
        ((healthy_services++))
    fi
else
    show_recent_logs "auditfairness"
fi

# R√©sum√© de la sant√©
echo -e "\n${BLUE}üìä R√©sum√© de la sant√©${NC}"
echo "===================="

health_percentage=$((healthy_services * 100 / total_services))

if [ $health_percentage -eq 100 ]; then
    echo -e "${GREEN}‚úì Tous les services sont op√©rationnels${NC} ($healthy_services/$total_services)"
elif [ $health_percentage -ge 80 ]; then
    echo -e "${YELLOW}‚ö† La plupart des services sont op√©rationnels${NC} ($healthy_services/$total_services)"
else
    echo -e "${RED}‚úó Plusieurs services ont des probl√®mes${NC} ($healthy_services/$total_services)"
fi

# V√©rifications suppl√©mentaires
echo -e "\n${BLUE}üîç V√©rifications suppl√©mentaires${NC}"
echo "==============================="

# Utilisation des ressources
echo -e "\n${BLUE}üíæ Utilisation des ressources :${NC}"
docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}" 2>/dev/null || echo "Stats non disponibles"

# Espace disque
echo -e "\n${BLUE}üíø Espace disque Docker :${NC}"
docker system df 2>/dev/null || echo "Info disque non disponible"

# R√©seaux Docker
echo -e "\n${BLUE}üåê R√©seaux actifs :${NC}"
docker network ls --format "table {{.Name}}\t{{.Driver}}\t{{.Scope}}" 2>/dev/null || echo "R√©seaux non disponibles"

# Recommandations
echo -e "\n${BLUE}üí° Recommandations${NC}"
echo "=================="

if [ $health_percentage -lt 100 ]; then
    echo "‚Ä¢ V√©rifiez les logs des services d√©faillants"
    echo "‚Ä¢ Red√©marrez les services probl√©matiques : docker compose restart [service]"
    echo "‚Ä¢ V√©rifiez les ressources syst√®me disponibles"
fi

echo "‚Ä¢ Surveillez r√©guli√®rement la sant√© des services"
echo "‚Ä¢ Configurez des alertes pour les services critiques"
echo "‚Ä¢ Sauvegardez r√©guli√®rement la base de donn√©es PostgreSQL"

echo -e "\n${BLUE}üîÑ Pour surveiller en continu :${NC}"
echo "watch -n 30 ./monitor.sh"

echo -e "\n${GREEN}Surveillance termin√©e.${NC}"
echo "Date : $(date)"

exit 0